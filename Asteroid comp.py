import numpy as np
import matplotlib.pyplot as plt
"""
#day 1
#'2012-01-20 07:27:54'
#T1
#Plate Constants
a_11_d1, a_12_d1, x_0_d1 =  [ 9.97962142e-01, -8.49989215e-04,  1.02523027e+03]
a_21_d1, a_22_d1, y_0_d1 =  [1.38198795e-03, 9.97853115e-01, 1.02695527e+03]
T1_d1 =  [[191497.84658592794, -163.1034860271301, 1025.2302663431678], [265.1881317121959, 191476.92557027802, 1026.955273705113], [0, 0, 1]]
#T2
a_11_d1_2, a_12_d1_2, x_0_d1_2 =  [ 1.00788340e+00, -8.58439400e-04,  1.02523027e+03]
a_21d12, a_22d12, y_0d12 =  [1.39572701e-03, 1.00777329e+00, 1.02695527e+03]
T2_d1 =  [[193401.62634730828, -164.7249826720186, 1025.2302663431676], [267.8245049513809, 193380.49734495324, 1026.955273705113], [0, 0, 1]]
#day 2
#'2012-01-21 07:39:37'
#T1
#Plate Constants
a_11_d2, a_12_d2, x_0_d2 =  [ 9.98086992e-01, -7.33542699e-03,  1.02256097e+03]
a_21_d2, a_22_d2, y_0_d2 =  [-8.63168885e-03,  9.91442628e-01,  1.02475116e+03]
T1_d2 =  [[191521.80388925792, -1407.5869347433365, 1022.5609700226833], [-1656.3251820706457, 190246.82429082235, 1024.7511554313492], [0, 0, 1]]
#T2
a_11_d2_2, a_12_d2_2, x_0_d2_2 =  [ 1.00800949e+00, -7.40835229e-03,  1.02256097e+03]
a_21_d2_2, a_22_d2_2, y_0_d2_2 =  [-8.71750096e-03,  1.00129908e+00,  1.02475116e+03]
T2_d2 =  [[193425.82182265972, -1421.5804890653758, 1022.5609700226826], [-1672.7915727695479, 192138.1669884508, 1024.7511554313487], [0, 0, 1]]
#day 3
#'2012-01-23 08:35:52' 
#T1
#Plate Constants
a_113_d3, a_12_d3, x_0_d3 =  [ 9.86058866e-01, -1.50283072e-02,  1.02554234e+03]
a_21_d3, a_22_d3, y_0_d3 =  [-8.68090058e-03,  9.94589515e-01,  1.02764162e+03]
T1_d3 =  [[189213.74015245293, -2883.7651690012626, 1025.5423378667351], [-1665.7683668360996, 190850.67683803753, 1027.641615318358], [0, 0, 1]]

#T2
a_11_d3_2, a_12_d3_2, x_0_d3_2 =  [ 9.95861790e-01, -1.51777114e-02,  1.02554234e+03]
a_21_d3_2, a_22_d3_2, y_0_d3_2 =  [-8.76720193e-03,  1.00447725e+00,  1.02764162e+03]
T2_d3 =  [[191094.81242297436, -2912.434179453287, 1025.5423378667351], [-1682.3286371496374, 192748.02274812336, 1027.6416153183577], [0, 0, 1]]


#day 4
#'2012-01-26 05:05:05'
#T1
#Plate Constants
a_11_d4, a_12_d4, x_0_d4 =  [ 1.00682930e+00, 8.34983605e-03, 1.02470744e+03]
a_21_d4, a_22_d4, y_0_d4 =  [9.11841195e-03, 1.00204250e+00, 1.01558527e+03]
T1_d4 =  [[193199.35615160802, 1602.2407617287574, 1024.7074369014285], [1749.7219366449656, 192280.822855069, 1015.5852740783439], [0, 0, 1]]

#T2
a_11_d4_2, a_12_d4_2, x_0_d4_2 =  [1.01683872e+00, 8.43284611e-03, 1.02470744e+03]
a_21_d4_2, a_22_d4_2, y_0_d4_2 =  [9.20906282e-03, 1.01200433e+00, 1.01558527e+03]
T2_d4 =  [[195120.05150516212, 1618.1694710558897, 1024.707436901429], [1767.1168330911505, 194192.3865910552, 1015.5852740783439], [0, 0, 1]]
"""

alphalist_T1 = [1.4016682242634213,1.4072657676902105,1.4117646311826548,1.4141548370400143]
alphalist_T2 = [1.40168395882353,1.4072657880981172,1.4117642710380123,1.4141550590418206]
#since I did not use [::-1] to flip north and south I will do it in this step
#radians
delta_T1 = np.flip([0.4704531053810972,0.47022016738896094,0.47079002167273526,0.47077743511141235])
delta_T2 = np.flip([0.4704512992202806,0.4702201785095035,0.47079057780709965,0.4707776876864166])
USNOxvals = [26.98,26.968,26.943,26.931]
USNOyvals = [80.51,80.634,80.89,81.03]
#time taken between each reading in hours
time = [0, 24.19527777777778, 48.939, 68.486944444444443]

#plotting the path of the asteroid in degrees
plt.figure(figsize=(5,5))
#plt.plot(USNOyvals,USNOxvals,'+',c='purple',label='USNO')
plt.plot(np.array(alphalist_T1)*57.2958,np.array(delta_T1)*57.2958,'r--',c='grey',label='Path_T1')
plt.plot(np.array(alphalist_T1)*57.2958,np.array(delta_T1)*57.2958,'o',c='blue',label='Asteroid_T1')
plt.plot(np.array(alphalist_T2)*57.2958,np.array(delta_T2)*57.2958,'x',c='black',label='Asteroid_T2')
plt.axis((80.28,81.05,26.7,27.2))
plt.xlabel("RA [deg]")
plt.ylabel("DEC [deg]")
plt.title('Path of 26 Proserpina')
plt.legend()
plt.savefig("d5.pdf",bbox_inches = 'tight')
plt.show()


#arc length
arclength1 = np.arccos(np.sin(delta_T1[0])*np.sin(delta_T2[1])+np.cos(delta_T1[0])*np.cos(delta_T2[1])*(np.cos(alphalist_T1[0]-alphalist_T1[1])))
arclength2 = np.arccos(np.sin(delta_T1[1])*np.sin(delta_T2[2])+np.cos(delta_T1[1])*np.cos(delta_T2[2])*(np.cos(alphalist_T1[1]-alphalist_T1[2])))
arclength3 = np.arccos(np.sin(delta_T1[2])*np.sin(delta_T2[3])+np.cos(delta_T1[2])*np.cos(delta_T2[3])*(np.cos(alphalist_T1[2]-alphalist_T1[3])))

#proper motion in arcsec/hour
motion1 = (arclength1*206265)/time[1]
motion2 = (arclength2*206265)/time[2]
motion3 = (arclength3*206265)/time[3]
#error in pixel:
error = [0.143,0.630,1.02,0.966]
#proper motion in milliarcsec/year
motion_1 = (motion1*(8.76e+6))
motion_2 = (motion2*(8.76e+6))
motion_3 = (motion3*(8.76e+6))
#distances obtained from nasa website in kiloparsecs
distances = [9.74e-9, 9.805e-9, 9.907e-9]
#transverse velocity in km/s
Vt1 = (motion_1*distances[0])*0.21
Vt2 = (motion_2*distances[1])*0.21
Vt3 = (motion_3*distances[2])*0.21
